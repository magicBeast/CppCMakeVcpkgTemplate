cmake_minimum_required(VERSION 4.0.2)
project(cpp_template)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
if(NOT APPLE)
  # set(CMAKE_CXX_CLANG_TIDY clang-tidy)
endif()

# --- Robustly Find System Dependencies (e.g., ICU for macOS) ---
if(APPLE)
  find_program(HOMEBREW_EXECUTABLE brew)
  if(HOMEBREW_EXECUTABLE)
    message(STATUS "Homebrew found. Searching for ICU...")
    execute_process(
            COMMAND ${HOMEBREW_EXECUTABLE} --prefix icu4c
            OUTPUT_VARIABLE ICU4C_PREFIX
            OUTPUT_STRIP_TRAILING_WHITESPACE
            RESULT_VARIABLE BREW_RESULT
        )
    if(BREW_RESULT EQUAL 0)
      list(APPEND CMAKE_PREFIX_PATH ${ICU4C_PREFIX})
      message(STATUS "Found ICU via Homebrew at: ${ICU4C_PREFIX}")
    endif()
  endif()
endif()

# --- Find Dependencies from vcpkg ---
find_package(unofficial-sqlite3 CONFIG REQUIRED)
find_package(fmt CONFIG REQUIRED)
find_package(raylib CONFIG REQUIRED)
# We now also need to find GLFW, because raylib depends on it.
find_package(glfw3 CONFIG REQUIRED)
# For the header-only raylib-cpp wrapper, we must use find_path as instructed by vcpkg.
find_path(RAYLIB_CPP_INCLUDE_DIRS "raylib-cpp.hpp")

set(
    CPP_TEMPLATE_SOURCES
    src/main.cpp
)

set(
    CPP_TEMPLATE_TEST_SOURCES
    src/test.cpp
)

# --- Main Target ---
add_executable(main ${CPP_TEMPLATE_SOURCES})
target_link_libraries(main PRIVATE
    unofficial::sqlite3::sqlite3
    fmt::fmt-header-only
    raylib
    glfw
)
target_include_directories(main PRIVATE ${RAYLIB_CPP_INCLUDE_DIRS})
set_property(TARGET main PROPERTY CXX_STANDARD 23)

# --- macOS App Bundle Configuration ---
if(APPLE)
  set_target_properties(main PROPERTIES
        MACOSX_BUNDLE TRUE
        MACOSX_BUNDLE_GUI_IDENTIFIER "com.yourname.pong"
        MACOSX_BUNDLE_BUNDLE_NAME "Pong Game"
        MACOSX_BUNDLE_SHORT_VERSION_STRING "1.0"
        MACOSX_BUNDLE_BUNDLE_VERSION "1.0.0"
        MACOSX_BUNDLE_INFO_PLIST "${CMAKE_SOURCE_DIR}/Info.plist.in"
    )

  # Copy assets folder into the app bundle's Resources directory
  add_custom_command(TARGET main POST_BUILD
        COMMAND ${CMAKE_COMMAND} -E copy_directory
        ${CMAKE_SOURCE_DIR}/assets
        $<TARGET_BUNDLE_CONTENT_DIR:main>/Resources/assets
        COMMENT "Copying assets into app bundle..."
    )
endif()

# --- Tests Target ---
add_executable(tests ${CPP_TEMPLATE_TEST_SOURCES})
target_link_libraries(tests PRIVATE
    unofficial::sqlite3::sqlite3
    fmt::fmt-header-only
    raylib
    glfw
)
target_include_directories(tests PRIVATE ${RAYLIB_CPP_INCLUDE_DIRS})
set_property(TARGET tests PROPERTY CXX_STANDARD 23)

enable_testing()
add_test(tests tests)

# --- Add Platform-Specific Frameworks for macOS ---
if(APPLE)
  target_link_libraries(main PRIVATE
        "-framework OpenGL"
        "-framework Cocoa"
        "-framework IOKit"
        "-framework CoreVideo"
    )
  target_link_libraries(tests PRIVATE
        "-framework OpenGL"
        "-framework Cocoa"
        "-framework IOKit"
        "-framework CoreVideo"
    )
endif()

# --- Formatting Targets ---
add_custom_target(
    check-format
    COMMAND clang-format --dry-run ${CPP_TEMPLATE_SOURCES} ${CPP_TEMPLATE_TEST_SOURCES}
    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
    COMMENT "checking format in src..."
)

add_custom_target(
    format
    COMMAND clang-format -i ${CPP_TEMPLATE_SOURCES} ${CPP_TEMPLATE_TEST_SOURCES}
    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
    COMMENT "checking format in src..."
)
